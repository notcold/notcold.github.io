---

title: js原型和继承
date: 2016-05-03 15:45:20
description:
categories: [Javascript]
tags: [原型链, 原型]
---

## js 原型

### prototype 和**proto**

    prototype和__proto__是js原型的关键，他们是说明js中对象关系的特殊属性
    js中只有方法才有prototype属性，普通的对象都有__proto__。

### 原型链

一般这么理解：访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着 `__proto__`
这条链向上找，这就是原型链。

ECMA 引入了标准对象原型访问器`Object.getPrototype(object)`来判断对象的原型关系

```js
var func =function(){
                //this is a function
}

var obj = new Function();//用面向对象的语言解释就是 obj是类Function的一个对象，
// Function也是他的构造函数

func.__proto__.constructor.prototype === Function.prototype)
// true

// Function 的这个对象obj，它既是个对象又是个方法，js中一切皆对象（除了那个null）
obj.__proto__.constructor.prototype === Function.prototype
// true

//Function 对象本身没有toString方法，那么这个方法是从哪来的呢？
//是从Object那继承的
console.log(Function.hasOwnProperty('toString')) // false
//因为Function和Object 都是原生对象，我们无法从原型链上看到他们的关系，
// 但是js规范中规定了Function与Object的关系，也表明了js中属性的传递

console.log(Object.prototype.isPrototypeOf(Function))
//true


```

原型关系![图片]({{site.url}}/assets/images/prototype/prototype.png)

在 JavaScript 中，每个函数都有一个 prototype 属性，当一个函数被用作构造函数来创建实例时，
该函数的 prototype 属性值将被作为原型赋值给所有对象实例（也就是设置实例的**proto**属性），
也就是说，所有实例的原型引用的是函数的 prototype 属性。

## new 对象

我们先按照对原型的理解实现 new 的步骤

```js
function newFunc(...args) {
  // 取出 args 数组第一个参数，即目标构造函数
  const constructor = args.shift();

  // 创建一个空对象，且这个空对象继承构造函数的 prototype 属性
  // 即实现 obj.__proto__ === constructor.prototype
  const obj = Object.create(constructor.prototype);

  // 执行构造函数，得到构造函数返回结果
  // 注意这里我们使用 apply，将构造函数内的 this 指向为 obj
  const result = constructor.apply(obj, args);

  // 如果造函数执行后，返回结果是对象类型，就直接返回，否则返回 obj 对象
  return typeof result === "object" && result != null ? result : obj;
}
```

## js 实现继承

### ES5 实现

    ```js
    //  原型继承
    Child.prototype = new Parent()
    // 构造函数继承
    function Child(){
        Parent.call(this,args)
    }
    //组合继承
    function Child (args1, args2) {
        this.args2 = args2
        Parent.call(this, args1)
    }

    Child.prototype = new Parent()
    Child.prototype.constrcutor = Child
    // 组合寄生继承
    function inherit(Child, Parent) {
        // 继承原型上的属性
        Child.prototype = Object.create(Parent.prototype)

        // 修复 constructor
        Child.prototype.constructor = Child

        // 存储超类
        Child.super = Parent

        // 静态属性继承
        if (Object.setPrototypeOf) {
            // setPrototypeOf es6
            Object.setPrototypeOf(Child, Parent)
        } else if (Child.__proto__) {
            // __proto__ es6 引入，但是部分浏览器早已支持
            Child.__proto__ = Parent
        } else {
            // 兼容 IE10 等陈旧浏览器
            // 将 Parent 上的静态属性和方法拷贝一份到 Child 上，不会覆盖 Child 上的方法
            for (var k in Parent) {
                if (Parent.hasOwnProperty(k) && !(k in Child)) {
                    Child[k] = Parent[k]
                }
            }
        }

    }

    ```

### ES6 实现

```js
class Person {
  constructor() {
    this.type = "person";
  }
}

class Student extends Person {
  constructor() {
    super(); // 继承 父类属性和方法
  }
}

// babel解析之后的继承

var Student = (function (_Person) {
  // 实现对父类原型链属性的继承
  _inherits(Student, _Person);

  // 将会返回这个函数作为完整的 Student 构造函数
  function Student() {
    // 使用检测
    _classCallCheck(this, Student);
    // _get 的返回值可以先理解为父类构造函数
    _get(Object.getPrototypeOf(Student.prototype), "constructor", this).call(
      this
    );
  }

  return Student;
})(Person);

```
