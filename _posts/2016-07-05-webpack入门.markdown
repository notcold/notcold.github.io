---
title: webpack入门
description: 
categories:
 - javascript 
tags: 
 - webpack
---


## webpack安装


通过node安装，最新
```
npm install --save-dev webpack

```
如果你使用 webpack v4+ 版本，你还需要安装 CLI。
```
npm install --save-dev webpack-cli

```

## webpack配置文件

   webpack是一个静态文件模块打包工具，它会通过解析配置入口文件来生成所有映射文件的依赖关系，然后将这些依赖生成为bundle。
    
    
   webpack.config.js
```
const path = require('path');

module.exports = {
  entry: './src/index.js', //配置揭西入口
  output: {
    filename: 'main.js', //输入结果
    path: path.resolve(__dirname, 'dist')
  }
};
```

### 解析文件
   
  webpack根据不同的文件格式来匹配相对应的 ` loader `，如果没有对应的 ` loader `文件就不会被解析处理。
  ```
  module.exports = {
    module: {
      rules: [
        { test: /\.css$/, use: 'css-loader' },
        { test: /\.ts$/, use: 'ts-loader' }
      ]
    }
  };
```
   配置规则告诉webpack css文件用css-loader来解析，ts文件用ts-loader来解析。
   >loader 描述了 webpack 如何处理 非 JavaScript(non-JavaScript) _模块_，并且在bundle中引入这些_依赖_。
   
  loader 解析器能够帮助我们将我们书写的浏览器不支持的形式装换为标准的js，html语法，从而能够在浏览器中运行。
   
###模块
  
  所有的文件被 ` loader `解析之后生成的都是模块，然后进入compile流程；

##webpack打包的运行周期



##项目配置

    下面是一份移动端多页面项目的webpack配置文件，额外引入了自定义的babel插件优化项目大小。
    
```js
/**
 * 说明: webpack的配置请在该文件进行修改
 * webpack配置文档请查看:https://webpack.github.io/docs/configuration.html
 */

var path = require('path');
var os = require('os');
var _ = require('lodash');
var webpack = require('webpack');
var HappyPack = require('happypack');
var happyThreadPool = HappyPack.ThreadPool({size: os.cpus().length + 2});
var glob = require('glob');
var RxPlugin = require('rax-webpack-plugin');
var LiveReloadPlugin = require('webpack-livereload-plugin');
var _definedConfig = require('./_config.webpack.defined');

var CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');

var babelConfig = require('./babel.config');
var cwd = process.cwd();
var componentName = 'Rxfietest',
    srcPath = path.resolve(__dirname, './src'),
    outputPath = path.resolve(__dirname, './build');

var isWin = /^win/.test(process.platform);
var nukeReg = isWin ? new RegExp(/node_modules\\.*nuke.*/) : new RegExp(/node_modules\/.*nuke.*/);

babelConfig.plugins.push([require.resolve('./transAPI/index.js')]);
var getDevEntry = require('./webpack.entry');



var config = {

    //服务器开启的端口号
    port: '3000',

    context: srcPath,

    //webpack 编译的入口文件
    entry: getDevEntry(srcPath),

    //输出的文件配置
    output: {
        path: outputPath,
        filename: '[name].js',
        publicPath: '/build/'
    },

    resolve: {
        // root: srcPath,
        modules: [path.join(cwd, "src"), path.join(cwd, "node_modules"), 'node_modules'],
        extensions: ['*', '.js', '.jsx', '.json'],
        alias: {
            'lib': path.resolve(__dirname, './src/lib'),
            'config': path.resolve(__dirname, './src/config'),
            'common': path.resolve(__dirname, './src/common'),
            'src': path.resolve(__dirname, './src'),
            'asset': path.resolve(__dirname, './src/asset'),
            'view': path.resolve(__dirname, './src/view'),
            'component': path.resolve(__dirname, './src/component'),
            'rax': 'weex-rx'
        }
    },

    "externals": [{
        "weex-rx": "commonjs rax",
        "rax": "commonjs rax",
        "nuke": "commonjs nuke",
        "QAP-SDK": "commonjs QAP-SDK",
        "genv": "commonjs genv",
    }],

    module: {
        rules: [{
            test: /\.js|\.jsx?$/,
            include: [
                path.resolve(__dirname, "src")
            ],
            loaders: ['happypack/loader?id=js']
        }, {
            test: /\.rxscss$/,
            loader: 'happypack/loader?id=rxscss',
            include: [
                path.resolve(__dirname, "src"),
                nukeReg
            ]
        }, {
            test: /\.scss$/,
            loaders: ['happypack/loader?id=scss'],
            include: [
                path.resolve(__dirname, "src"),
                nukeReg
            ]
        }, {
            test: /\.json$/,
            loaders: ['happypack/loader?id=json']
        }]
    },

    plugins: [

        new HappyPack({
            cache: true,
            debug: true,
            id: 'js',
            loaders: ['babel-loader'+ '?' + JSON.stringify(babelConfig)],
            threadPool: happyThreadPool
        }),

        new HappyPack({
            cache: true,
            debug: true,
            id: 'rxscss',
            loaders: ['rx-css-loader!sass-loader'],
            threadPool: happyThreadPool
        }),

        new HappyPack({
            cache: true,
            debug: true,
            id: 'scss',
            loaders: ['rx-css-loader!sass-loader'],
            threadPool: happyThreadPool
        }),

        new HappyPack({
            cache: true,
            debug: true,
            id: 'json',
            loaders: ['json-loader'],
            threadPool: happyThreadPool
        }),

        new RxPlugin({
            target: 'bundle'
        }),

        new webpack.NoEmitOnErrorsPlugin(),

        new webpack.optimize.ModuleConcatenationPlugin(),

        //进度插件
        new webpack.ProgressPlugin((percentage, msg) => {
            const stream = process.stderr;
            if (stream.isTTY && percentage < 0.71) {
                stream.cursorTo(0);
                stream.write(`📦   ${msg}`);
                stream.clearLine(1);
            }
        })
    ]
};


/**
 * 开发环境及demo编译时的配置
 * @returns {*}
 */
function dev() {

    var _config = _.cloneDeep(config);

    _config.plugins.push(
        new webpack.DefinePlugin({
            "process.env": {NODE_ENV: JSON.stringify('development')},
            "__DEV__": JSON.stringify(JSON.parse('true')),
            "____WEBPACK_DEBUG": JSON.stringify(JSON.parse('true')),

        }),

        new LiveReloadPlugin()
    );

    //添加soure-map
    _config.devtool = 'inline-source-map';

    return _config;
}


/**
 * 编译到demo文件夹的配置
 * 与dev的区别是不需要调试相关的配置
 */
function prod() {
    var _config = _.cloneDeep(config);

    // _config.externals = [];

    _config.plugins.push(
        new CaseSensitivePathsPlugin(),

        //查找相等或近似的模块，避免在最终生成的文件中出现重复的模块。
        // new webpack.optimize.DedupePlugin(),
        //Webpack gives IDs to identify your modules. With this plugin,
        // Webpack will analyze and prioritize often used modules assigning them the smallest ids.
        new webpack.optimize.OccurrenceOrderPlugin(),


        new webpack.DefinePlugin({
            "process.env": {NODE_ENV: JSON.stringify('production')},
            "__DEV__": JSON.stringify(JSON.parse('false')),
            "____WEBPACK_DEBUG": JSON.stringify(JSON.parse('true')),

        }),

        //UglifyJs
        new webpack.optimize.UglifyJsPlugin({
            minimize: true,
            compress: { warnings: false, drop_console: true },
            output: { comments: false }
        })
    );

    return _config;
}
// 用于分析
function fx() {
    var _config = _.cloneDeep(config);

    // _config.externals = [];

    _config.plugins.push(

        new CaseSensitivePathsPlugin(),

        //查找相等或近似的模块，避免在最终生成的文件中出现重复的模块。
        // new webpack.optimize.DedupePlugin(),
        //Webpack gives IDs to identify your modules. With this plugin,
        // Webpack will analyze and prioritize often used modules assigning them the smallest ids.
        new webpack.optimize.OccurrenceOrderPlugin(),


        new webpack.DefinePlugin({
            "process.env": { NODE_ENV: JSON.stringify('production') },
            "__DEV__": JSON.stringify(JSON.parse('false')),
            "____WEBPACK_DEBUG": JSON.stringify(JSON.parse('false')),
            "____WEBPACK_QAPVERSION": JSON.stringify(_definedConfig.qapVersion),
            "____WEBPACK_GUIDE_VERSION": JSON.stringify(_definedConfig.guideVersion),
            "____WEBPACK_GUIDE_ANDRIODURL": JSON.stringify(_definedConfig.guideQnAndriod)
        })
    );

    return _config;
}


module.exports = {

    dev: dev,

    prod: prod

};

```
