---
layout: post
title: js闭包
date: 2016-05-08 19:32:55
description: 
categories: [ Javascript]
tags: [闭包]
image: assets/images/5.jpg
---



## js闭包介绍
    
### 什么是闭包？
   
   在js中闭包是一个非常非常常见的用法，可能很多人不理解闭包，但是在写代码时其实不停地再用,比如做循环定时任务:
   ```js
   
   for(let i=0; i<10;i++){  //当定时任务执行的时候实际上for循环已经结束，但是因为我们用立即执行函数
       (function(i) {       //把 参数 i 绑定到了匿名函数内，函数执行后用于i被引用所以没有被释放，定时任务
         setTimeout(()=>{   //也就一直能访问到这个变量
             console.log(i)
         },1000)
       })(i)
   }

   ```
   
     
## 闭包的原理
   
   为什么会有闭包呢？
   因为在js语言中函数可以访问变量的时候当在域内查找不到的时候会向上层查找直到全局作用域，而外界无法读取函数中的变量。当我们在方法运行时将方法在所定义的地方的外界变量返回的时候就形成了闭包。某种意义上就是我们访问到了某些内部的变量。
   
   ```js
    function foo(a) {
        
        return function(b) {
            return a+b;
        }
    }
    
    var bar = foo(1)
    bar(2) //3  1是方法foo的参数，但却在bar被调用的时候被访问到了这就形成了闭包。
  

```
   
    
## 闭包的作用和问题
    
### 作用

   闭包的作用在上面的代码中其实已经很清晰的体现了，可以用于保存参数变量，可以传递被作用域限制无法访问的内部变量。  


### 问题
    
   当然闭包的用法也会导致很多问题，最直接的就是导致原本运行结束的方法由于内部参数被引用而无法被回收，从而就可能导致内存泄漏。
   闭包从某种意义上把方法中原本的` private属性 `变成了 ` public属性 `，安全性也就无法保障。
   
