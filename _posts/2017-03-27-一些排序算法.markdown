---
layout: post
title: 一些简单的排序算法
description: 可能不怎么用到，但还是要经常复习
categories:
 - Javascript
tags: 
 - 算法

image: assets/images/5.jpg

---

##冒泡排序

```js
function swap(arr,i,j) {
  let temp = arr[i];
  arr[i] = arr[j] 
  arr[j] = temp;
}

const arr = [12,2,2323,878,324,90,228,2,953,12,34,12,71]
//冒泡
    //大致思路是两层循环嵌套,整理思路: 外循环遍历数组的每一项,确定两两比较循环的次数(其实最后一次可以省略)，内循环则用于确定单次循环两两元素比较的次数,注意外层每循环一次,内循环两两比较的次数就会减1,即动图中的黄色块,表示已经排序好的柱形。
    
    for(let i=0 ; i<arr.length;i++){
        for(let j=i+1;j<arr.length; j++){
            if(arr[i]<arr[j]){
                swap(arr,i,j)
            }
        }
    }
    
```



## 选择排序

```javascript
 //选择排序
    //首先外循环,每循环一次就确定了一个值在排序中的位置.那要经过多少次,这样的循环?答案就是数列的长度减1. 接着是内循环: 确定剩下的未排序的柱形需要逐个比较的次数
     for(let i=0 ; i<arr.length;i++){
         let min = i;
            for(let j=i+1;j<arr.length; j++){
                if(arr[min] > arr[j]){
                    min = j;
                }
            }
           min!=i &&swap(arr,i,min)
     }
  

   
```



## 插入排序

```js
 //插入排序
    // 将要排序的数列分为两部分.左边为有序数列,刚开始为空.右边部分为待排序的数列.
    function insertSort(arr) {
        for(let i = 1; i < arr.length; i++) {  //外循环从1开始，默认arr[0]是有序段
        //每次循环有序部分就增长1
            for(let j = i; j > 0; j--) {  //j = i,表示此时你起在手上的那张牌,将arr[j]依次比较插入有序段中
                if(arr[j] < arr[j-1]) {
                    [arr[j],arr[j-1]] = [arr[j-1],arr[j]];  //其实这里内循环中,只要比它前一个数小就交换,直到没有更小的,就break退出.
                } else {
                    break;
                }
            }
        }
        return arr;
    }
    
  
```





## 归并排序



```js
  //归并排序
    //将数组拆分为两个子数组, 分别排序, 最后才将两个子数组合并; 拆分的两个子数组, 再继续递归拆分为更小的子数组, 进而分别排序, 直到数组长度为1, 直接返回该数组为止.

    function mergeSort(array) {  //采用自上而下的递归方法
      var length = array.length;
      if(length < 2) {
        return array;
      }
      var m = (length >> 1),
          left = array.slice(0, m),
          right = array.slice(m); //拆分为两个子数组
      return merge(mergeSort(left), mergeSort(right));//子数组继续递归拆分,然后再合并
    }
    function merge(left, right){ //合并两个子数组
      var result = [];
      while (left.length && right.length) {
        var item = left[0] <= right[0] ? left.shift() : right.shift();//注意:判断的条件是小于或等于,如果只是小于,那么排序将不稳定.
        result.push(item);
      }
      return result.concat(left.length ? left : right);
    }
```


## 快速排序

```js

   //快速排序
   //找到一个数作为参考，比这个数字大的放在数字左边，比它小的放在右边； 然后分别再对左边和右变的序列做相同的操作(递归).
  function quickSort(array, left, right) {
    var partitionIndex,
        left = typeof left == 'number' ? left : 0,
        right = typeof right == 'number' ? right : array.length-1;
    if (left < right) {
      partitionIndex = partition(array, left, right);//切分的基准值
      quickSort(array, left, partitionIndex-1);
      quickSort(array, partitionIndex+1, right);
    }
    return array;
  }
  function partition(array, left ,right) {   //分区操作
    for (var i = left+1, j = left; i <= right; i++) {//j是较小值存储位置的游标
      array[i] < array[left] && swap(array,i, ++j);//以第一个元素为基准
    }
    swap(array,left, j);            //将第一个元素移至中间
    return j;
  }
```

