---
layout: post
title: js闭包
date: 2016-05-08 19:32:55
description:
categories: [Javascript]
tags: [闭包]
---

## js 闭包介绍

### 什么是闭包？

在 js 中 闭包是一个绕不过去的东西，因为开发的时候很多地方都离不开它

```js
function foo() {
  let count = 0;
  return function bar() {
    count++;
    return count;
  };
}
var bar = foo();
bar();
// 我们都知道这段代码bar函数引用到了foo中的变量，使得我们拥有来一个不可见的私有变量。
```

## 基本知识

    闭包不是一个单一的概念，在js它涉及到作用域，作用域链，执行上下文等相关东西

### 作用域

在 js 中分几种作用域：函数作用域和全局作用域还有 ES 新增的块作用域

- 局部作用域

  ```js
  function foo() {
    var a = 1;
    return a;
  }
  foo();
  // 当执行函数foo的时候，就会创建 一个foo的额函数作用域，a是这个作用域中的变量。a只能在foo内部被访问到
  ```

- 全局作用域

  ```js
  var bar = 0;
  function foo() {
    var a = 1;
    console.log(bar);
    return a;
  }
  foo();
  // 再次执行函数foo的时候，除了内部的变量a,还有一个bar不是在内部定义，这个时候foo就会向外寻找这个变量，因此可以在全局作用域中找到bar
  ```

- 块级作用域

  ```js
  function foo() {
    console.log(a);
    var a = 1;
    return a;
  }
  foo(); // 打印 undefined 返回 1
  // var生命的变量会发生变量提升
  function foo() {
    console.log(a);
    let a = 1;
    return a;
  }
  foo(); // Uncaught ReferenceError: a is not defined。
  //let/const 声明的变量只会产生一个块级作用域，在声明之前访问变量就会导致 referenceError
  ```

### 作用域链

上面讲到了各个做作用域，但是在 js 中各个作用域不是单独分割的，而是有层层包裹的关系的,比如：

```js
var a = 0;
function foo() {
  var b = 1;
  // foo函数在全局作用域下
  function bar() {
    var c = 2;
    console.log(a); //0
    console.log(d); //undefined err

    // bar 执行上下文
    /*
    {
        全局作用域
        {
            foo函数作用域
            {
                bar函数作用域
                // 在bar函数中可以向上查找变量
                // a 在全局作用域下，找到全局作用域的时候就找到了a的值
                // d 在foo和全局作用域下都没有声明，所以 d 没有值
            }
        }
    }

    */
  }
}
```

> 这样一个作用域的关系构建了 js 执行时内部的作用域链，函数通过这个链路去查找使用到的变量，它就像链条一样把一层层的嵌套函数连接在一起

### 执行上下文和调用栈

1. 执行上下文就是当前代码执行的执行环境和作用域
   `执行阶段主要任务是执行代码，执行上下文在这个阶段全部创建完成。`
   作用域在预编译阶段确定，但是作用域链是在执行上下文的创建阶段完全生成的。因为函数在调用时，才会开始创建对应的执行上下文。执行上下文包括了：变量对象、作用域链以及 this 的指向

   ![执行上下文](/assets/images/2016/runtimeenv.png)

2. 调用栈

   在执行一个函数时，如果这个函数又调用了另外一个函数，而这个「另外一个函数」也调用了「另外一个函数」，便形成了一系列的调用栈。当一个函数执行完 return 之后就会被移出调用栈，当我们在写代码的时候哦一不小心递归太多次导致调用栈太深就可能发生调用栈溢出的情况。

## 闭包的原理

理解了作用域，作用域链和执行上下文这些概念之后回头再来看闭包，为什么会有闭包？

> 函数嵌套函数时，内层函数引用了外层函数作用域下的变量，并且内层函数在全局环境下可访问，就形成了闭包。

```js
function foo(a) {
  return function (b) {
    return a + b;
  };
}

var bar = foo(1);
bar(2); //3  1是方法foo的参数，但却在bar被调用的时候被访问到了这就形成了闭包。
```

### 内存管理

上面的例子中，由于闭包引用返回的内部函数引用了 foo 函数内部的变量 a，所以 foo 函数作用域就一直存在，这就导致这块内存一直无法被释放，所以再使用闭包的额时候一定要谨慎处理，否则就会引起内存泄漏。

