I"d	<h1 id="xmlhttprequest对象介绍">XMLHttpRequest对象介绍</h1>

<h3 id="什么是-xmlhttprequest-对象">什么是 XMLHttpRequest 对象？</h3>

<h5 id="xmlhttprequest-对象用于在后台与服务器交换数据">XMLHttpRequest 对象用于在后台与服务器交换数据。</h5>

<h5 id="xmlhttprequest-对象是开发者的梦想因为您能够">XMLHttpRequest 对象是开发者的梦想，因为您能够：</h5>

<ul>
  <li>在不重新加载页面的情况下更新网页</li>
  <li>在页面已加载后从服务器请求数据</li>
  <li>在页面已加载后从服务器接收数据</li>
  <li>在后台向服务器发送数据</li>
</ul>

<h5 id="所有现代的浏览器都支持-xmlhttprequest-对象">所有现代的浏览器都支持 XMLHttpRequest 对象。</h5>
<pre><code>from W3C
</code></pre>

<h3 id="创建-xmlhttprequest-对象">创建 XMLHttpRequest 对象</h3>

<p>(IE7+、Firefox、Chrome、Safari 以及 Opera)</p>

<pre><code>xhr = new XMLHttpRequest();
</code></pre>

<p>Internet Explorer （IE5 和 IE6）</p>

<pre><code>xhr =new ActiveXObject("Microsoft.XMLHTTP");
</code></pre>

<p>xhr对象</p>
<pre><code class="language-js">    {
           onabort: null  //打断请求时的回调
           onerror: null  //请求失败的回调
           onload: null   //请求中的回调
           onloadend: null //请求结束
           onloadstart: null //请求开始
           onprogress: null 
           onreadystatechange: null     
           ontimeout: null
           readyState: 0
           response: ""
           responseText: ""
           responseType: ""
           responseURL: ""
           responseXML: null
           status: 0
           statusText: ""
           timeout: 0
           upload: XMLHttpRequestUpload 
           withCredentials: false
           __proto__: XMLHttpRequest
       }
</code></pre>

<p>一个简单的xhr请求</p>

<pre><code class="language-js"> 
        const client = new XMLHttpRequest();
        client.open("GET", url);//url可以是一个下载地址也可以是一个网页地址
        client.onreadystatechange = function() {
            if (xhr.readyState &gt;= 3) {
                //数据成功返回
            }
        };
        client.responseType = "json";
        client.setRequestHeader("Accept", "application/json");
        client.send(); //get请求不需要send数据
 
</code></pre>
:ET